summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
View(statesABV_IBU)
View(data)
#stats map
states@data  = states@data %>% left_join(statesABV_IBU,by='abb')
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
#stats map
states@data  = states@data %>% left_join(statesABV_IBU,by='abb')
#states=statesData
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g Breweries",
states$name, states$n
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7,
position = "bottomright", title='Breweries per State')
#states=statesData
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$MaxABV, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Max ABV",states$name, states$MaxABV) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7,
position = "bottomright", title='Max ABV per State')
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
summary(statesABV_IBU$MaxABV)
statesABV_IBU$MaxABV
sort(statesABV_IBU$MaxABV)
sort(statesABV_IBU$MaxIBU)
state.x77
install.packages('USAboundaries')
USAboundaries::us_states()
t=USAboundaries::us_states()
t$statefp
# population
census = read.csv('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv')
# population
census = read.csv('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv')
census$STATE
census$STATE
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
dfStates
dfStates
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
# population
census = read.csv('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv')
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states@data = states@data %>% inner_join(dfStates,by='name')
# population
download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
# population
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
# population
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states@data = states@data %>% inner_join(dfStates,by='name')
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
#adding the count columns to the states spatial data
states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Breweries",states$name, states$n) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~n, opacity = 0.7,
position = "bottomright", title='Breweries per State')
data = merge(beers,breweries,by.x='Brewery_id',by.y='Brew_ID',all=T)
h4('First 6 Observations')
DT::datatable(head(data,6),rownames = F)
h4('Last 6 Observations')
DT::datatable(tail(data,6),rownames = F)
countNA = sapply(data,function(x){sum(is.na(x))})
kable(countNA,col.names='Count of NA')
summary = data %>%
group_by(State) %>%
summarise(ABVMedian = median(ABV,na.rm=T)
,IBUMedian = median(IBU,na.rm=T)
) %>%
ungroup()
summary(summary)
# Question: Why do we need ungroup()? The code below works just fine without ungroup()
summary = data %>%
group_by(State) %>%
summarise(ABVMedian = median(ABV,na.rm=T)
,IBUMedian = median(IBU,na.rm=T)
)
summary(summary)
# There is an NA value. Which one is it?
summary[rowSums(is.na(summary)) > 0,]
# SD has NA values for IBUMedian; need to remove before plotting
# Why does SD have NA values even though we removed NA values when we calculated median?
# Reason: na.rm will remove NA values before applying median function. However, if a state has all NA values
# for a field (for example SD has all NA value for IBU), the summarize will add a NA value for that State
# no need for trim function.. we can use trimws function... I added at the top as is better to clean the data before doing the work
# trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# data$State <- trim(data$State)
data[data$State == 'SD', ]
ggplot(data=filter(summary,!is.na(ABVMedian))
,aes(x=fct_reorder(State,ABVMedian,desc=T)
,y=ABVMedian)) +
geom_col() +
xlab("State") +
ylab("Median Alcohol Content") +
scale_y_continuous(labels=percent)+
coord_flip()
ggplot(data=filter(summary,!is.na(IBUMedian))
,aes(x=fct_reorder(State,IBUMedian,desc=T)
,y=IBUMedian)) +
geom_col() +
xlab("State") +
ylab("Median International Bitterness Unit") +
coord_flip()
message("The State with the maximum alcoholic (ABV) beer is:"
,arrange(data,desc(ABV))$State[1]
)
message("The State with the most bitter (IBU) beer is:"
,arrange(data,desc(IBU))$State[1]
)
#calculating max abv and mav ibu
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
states@data
states@data %>% left_join(statesABV_IBU,by='abb')
states@data
#adding to the states map data frame
sp::merge(states,statesABV_IBU,by='abb')
#adding the count columns to the states spatial data
states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
#states@data = states@data %>% inner_join(dfStates,by='name')
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
#adding the count columns to the states spatial data
#states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
states@data$n=1
#states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Breweries",states$name, states$n) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~n, opacity = 0.7,
position = "bottomright", title='Breweries per State')
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states=sp::merge(states,dfStates,by='name',all.x=T)
#states@data = states@data %>% inner_join(dfStates,by='name')
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
#adding the count columns to the states spatial data
states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
#states@data$n=1
#states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Breweries",states$name, states$n) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~n, opacity = 0.7,
position = "bottomright", title='Breweries per State')
state.name
datasets::state.x77
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
states@polygons
class(states)
#adding state id
states=sp::merge(states,dfStates,by='name',all.x=T)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
breweries %>%
group_by(State)
breweries %>%
group_by(State)
breweries %>%
group_by(State) %>%
summarise(num = n())
breweries %>%
group_by(State) %>%
summarise(num = n()) %>%
mutate(id = n())
breweries %>%
group_by(State) %>%
summarise(num = n()) %>%
ungroup()
breweries %>%
group_by(State) %>%
mutate(num = n()) %>%
ungroup()
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
breweriesState
#adding the count columns to the states spatial data
states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
class(pal)
median(c(1,NA))
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#adding state id
states=sp::merge(states,dfStates,by='name',all.x=T)
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
summary(summary)
is.na(summary)
# There is an NA value. Which one is it?
summary[rowSums(is.na(summary)) > 0,]
summary[rowSums(is.na(summary)) > 0,]
data[data$State == 'SD', ]
filter(summary,!is.na(ABVMedian))
ggplot(data=data,aes(x=IBU,y=ABV))+
geom_point() +
geom_smooth(method='lm') +
scale_y_continuous(labels=percent)
model=lm(data=data,formula=ABV~IBU)
model
model

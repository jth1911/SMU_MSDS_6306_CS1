scale_y_continuous(labels=percent)+
coord_flip()
ggplot(data=filter(summary,!is.na(IBUMedian))
,aes(x=fct_reorder(State,IBUMedian,desc=T)
,y=IBUMedian)) +
geom_col() +
xlab("State") +
ylab("Median International Bitterness Unit") +
coord_flip()
message("The State with the maximum alcoholic (ABV) beer is:"
,arrange(data,desc(ABV))$State[1]
)
message("The State with the most bitter (IBU) beer is:"
,arrange(data,desc(IBU))$State[1]
)
#calculating max abv and mav ibu
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
states@data
states@data %>% left_join(statesABV_IBU,by='abb')
states@data
#adding to the states map data frame
sp::merge(states,statesABV_IBU,by='abb')
#adding the count columns to the states spatial data
states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
#states@data = states@data %>% inner_join(dfStates,by='name')
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
#adding the count columns to the states spatial data
#states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
states@data$n=1
#states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Breweries",states$name, states$n) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~n, opacity = 0.7,
position = "bottomright", title='Breweries per State')
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states=sp::merge(states,dfStates,by='name',all.x=T)
#states@data = states@data %>% inner_join(dfStates,by='name')
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
#adding the count columns to the states spatial data
states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
#states@data$n=1
#states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Breweries",states$name, states$n) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~n, opacity = 0.7,
position = "bottomright", title='Breweries per State')
state.name
datasets::state.x77
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
states@polygons
class(states)
#adding state id
states=sp::merge(states,dfStates,by='name',all.x=T)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
breweries %>%
group_by(State)
breweries %>%
group_by(State)
breweries %>%
group_by(State) %>%
summarise(num = n())
breweries %>%
group_by(State) %>%
summarise(num = n()) %>%
mutate(id = n())
breweries %>%
group_by(State) %>%
summarise(num = n()) %>%
ungroup()
breweries %>%
group_by(State) %>%
mutate(num = n()) %>%
ungroup()
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
breweriesState
#adding the count columns to the states spatial data
states = sp::merge(states,breweriesState,by.x='abb',by.y='State')
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
class(pal)
median(c(1,NA))
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#adding state id
states=sp::merge(states,dfStates,by='name',all.x=T)
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
summary(summary)
is.na(summary)
# There is an NA value. Which one is it?
summary[rowSums(is.na(summary)) > 0,]
summary[rowSums(is.na(summary)) > 0,]
data[data$State == 'SD', ]
filter(summary,!is.na(ABVMedian))
ggplot(data=data,aes(x=IBU,y=ABV))+
geom_point() +
geom_smooth(method='lm') +
scale_y_continuous(labels=percent)
model=lm(data=data,formula=ABV~IBU)
model
model
,arrange(data,desc(ABV))$State[1:5]
arrange(data,desc(ABV))$State[1:5]
dplyr::arrange(data,desc(ABV))$State[1:5]
View(statesABV_IBU)
data
names(data)
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#adding state id
states=sp::merge(states,dfStates,by='name',all.x=T)
bins <- c(30,80,100,120,Inf)
pal <- colorBin("YlOrRd", domain = states$MaxIBU, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Max IBU",states$name, states$MaxIBU) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(MaxIBU),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~MaxIBU, opacity = 0.7,
position = "bottomright", title='Max IBU per State')
summary(data)
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#loading current population estimates from Census.GOV
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
#dataframe about states, merged with Population
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#adding state id
states=sp::merge(states,dfStates,by='name',all.x=T)
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both')) #removing trailing spaces
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
breweriesState = breweries %>% count(State) # Option 2 . This is better!
DT::datatable(breweriesState,rownames = F)
names(census)
census$STATE
census$name
View(census)
names(data)
data$State
View(states)
View(breweriesState)
View(breweries)
View(breweriesState)
View(breweries)
View(states)
View(dfStates)
names(dfStates)
#merge Beer, Breweries and populations
dataPop = data %>%
left_join(select(dfStates,name,pop),by=c("name"="NAME"))
#merge Beer, Breweries and populations
dataPop = data %>%
left_join(select(dfStates,name,pop),by="name")
names(data)
#merge Beer, Breweries and populations
dataPop = data %>%
left_join(select(dfStates,name,pop),by=c("State"="name"))
dataPop
#merge Beer, Breweries and populations
dataPop = data %>%
left_join(select(dfStates,abb,pop),by=c("State"="abb"))
dataPop
PopBrewery = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Brewery_id))
PopBrewery
PopBrewery = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Brewery_id)
.popByBrewery = pop/count)
PopBrewery = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Brewery_id)
,popByBrewery = pop/count
)
PopBrewery = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Brewery_id)
,popByBrewery = pop/n_distinct(Brewery_id)
)
PopBrewery = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Brewery_id)
,popByBrewery = first(pop)/count
) %>5
PopBrewery = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Brewery_id)
,popByBrewery = first(pop)/count
) %>%
ungroup()
ungroup() %>%
mutate(popByBrewery = pop/count)
PopBrewery = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Brewery_id)) %>%
ungroup() %>%
mutate(popByBrewery = pop/count)
PopBrewery
ggplot(data=PopBrewery, aes(x=pop, y=count)) %>%
geom_point()
PopBrewery
ggplot(data=PopBrewery, aes(x=pop, y=count)) %>%
geom_point()
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point()
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_label(aes(label=State))
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State))
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State)check_overlap=T,size=2)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=2)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,nudge_x=1)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,nudge_x=10)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=1)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-1)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(labels=comma)
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(labels=comma(scale=1000))
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(labels=function(x){comma(x,scale=1000)})
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(labels=function(x){comma(x,scale=1/1000)})
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(name='Poulation (thousands)',labels=function(x){comma(x,scale=1/1000)})
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(name='Population (Thousands)',labels=function(x){comma(x,scale=1/1000)}) +
ylab("Count of Breweries")
PopBeers = dataPop %>%
group_by(State,pop) %>%
summarise(count = n_distinct(Beer_ID)) %>%
ungroup() %>%
mutate(popByBrewery = pop/count)
PopBeers
ggplot(data=PopBeers, aes(x=pop, y=count)) +
geom_point() +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(name='Population (Thousands)',labels=function(x){comma(x,scale=1/1000)}) +
ylab("Count of Breweries")
ggplot(data=PopBrewery, aes(x=pop, y=count)) +
geom_point() +
geom_smooth(method='lm') +
geom_text(aes(label=State),check_overlap=T,size=3,hjust=-.5) +
scale_x_continuous(name='Population (Thousands)',labels=function(x){comma(x,scale=1/1000)}) +
ylab("Count of Breweries")
model=lm(data=PopBrewery,formula=pop~count)
model=lm(data=PopBrewery,formula=pop~count)
model
summary(model)
model$coefficients[[2]]
round(model$coefficients[[2]],digits=0)
comma(model$coefficients[[2]],digits=0)
comma(model$coefficients[[2]])
model=lm(data=PopBeers,formula=pop~count)
comma(model$coefficients[[2]])

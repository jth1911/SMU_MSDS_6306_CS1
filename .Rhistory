statesData$name
#getting states maps
statesData <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
statesData@data = statesData@data %>% inner_join(dfStates,by='Name')
#addint state id
statesData@data = statesData@data %>% inner_join(dfStates,by='name')
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb)
#getting states maps
statesData <- geojsonio::geojson_read("data/us-states.json", what = "sp")
statesData@data %>% inner_join(dfStates,by='name')
#addint state id
statesData@data = statesData@data %>% inner_join(dfStates,by='name')
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb)
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states@data = states@data %>% inner_join(dfStates,by='name')
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb)
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states@data = states@data %>% inner_join(dfStates,by='name')
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both'))
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
# Option 1
# breweriesState = breweries %>%
#   group_by(State) %>%
#   summarise(Breweries = n()) %>%
#   ungroup()
breweriesState = breweries %>% count(State) # Option 2
DT::datatable(breweriesState,rownames = F)
a %>% left_join(breweriesState,by='abb')
#adding the count columns to the states spatial data
states@data  = states@data %>% left_join(breweriesState,by='abb')
breweriesState
#adding the count columns to the states spatial data
states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State')
#adding the count columns to the states spatial data
states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
#adding the count columns to the states spatial data
states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
states@data
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb)
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states@data = states@data %>% inner_join(dfStates,by='name')
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both'))
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
# Option 1
# breweriesState = breweries %>%
#   group_by(State) %>%
#   summarise(Breweries = n()) %>%
#   ungroup()
breweriesState = breweries %>% count(State) # Option 2
DT::datatable(breweriesState,rownames = F)
data,by='name'
data
data
data = merge(beers,breweries,by.x='Brewery_id',by.y='Brew_ID',all=T)
h4('First 6 Observations')
DT::datatable(head(data,6),rownames = F)
data
---
title: "Expansion: The Borg Brewery"
author: "James Jarding, Nikhil Gupta, Max Moro"
date: "September 29, 2018"
output:
html_document:
toc: true
toc_depth: 2
toc_float: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb)
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states@data = states@data %>% inner_join(dfStates,by='name')
```
We are here because of our love for Star Trek and beer.  Who would have ever imagined we would get tired of the typical draft beer and decide to brew our on own beer.  It started out as a small group competition that resulted in us picking a few brews, purchasing a building to meet and finally a full blown brewery that attracks not just Star Wars fans but fans of science fiction in general.  The Borg has assimilated 10 different draft beers and 2 seasonal beers.
Last month, the talk of selling our brew to other breweries caught fire.  We sat around brainstorming and really getting to know where.  Way too many ideas were thrown on the table and most were not based on any research.  In an attempt to further the discussion, we (James, Max and Nikhil) decided to do some research hoping to channel our discussion around factual data to best of our knowledge.  The data we have collected contains a sample of brewries by city/state and the desired taste by state.  This will help to narrow our focus to areas where beer is seen as a necessity and a strong opinion as to the desired taste.
# Breweries by State
First, lets take a look at the data we have.
```{r}
beers = read.csv('data/Beers.csv')
breweries = read.csv('data/Breweries.csv') %>%
mutate(State = trimws(State,'both'))
str(beers)
str(breweries)
# Both dataframes have column called 'Name'.
# In beers, it refers to the name of the beer
# In breweries, it refers to the name of the breweries.
# Let's rename for clarity, especially after merging.
names(beers)[names(beers) %in% 'Name'] <- 'Beer'
names(breweries)[names(breweries) %in% 'Name'] <- 'Brewery'
str(beers)
str(breweries)
```
## How many breweries are present in each state?
```{r}
# Option 1
# breweriesState = breweries %>%
#   group_by(State) %>%
#   summarise(Breweries = n()) %>%
#   ungroup()
breweriesState = breweries %>% count(State) # Option 2
DT::datatable(breweriesState,rownames = F)
```
Where can we focus our research?
- Top 10 States: CO, CA, MI, OR, TX, PA, MA, WA, IN, WI
Where should we avoid making strong assumptions?
- Bottom 10 States: DC, ND, SD, WV, AR, DE, MS, NV, AL, KS
## Map of States and Breweries
```{r Leaflet_Map_Count}
#adding the count columns to the states spatial data
states@data  = states@data %>% left_join(breweriesState,by=c('abb'='State'))
#states=statesData
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Breweries",states$name, states$n) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7,
position = "bottomright", title='Breweries per State')
```
# Top and Bottom Observearion of Beers
Merge beer data with the breweries data. Print the first 6 observations and the last six observations to check the merged file
```{r}
data = merge(beers,breweries,by.x='Brewery_id',by.y='Brew_ID',all=T)
h4('First 6 Observations')
DT::datatable(head(data,6),rownames = F)
h4('Last 6 Observations')
DT::datatable(tail(data,6),rownames = F)
```
# NAs in the data
Report the number of NA's in each column
```{r}
countNA = sapply(data,function(x){sum(is.na(x))})
kable(countNA,col.names='Count of NA')
```
# ABV and IBU
Compute the median alcohol content and international bitterness unit for each state. Plot a bar chart to compare
```{r fig.height=7, warning=FALSE}
summary = data %>%
group_by(State) %>%
summarise(ABVMedian = median(ABV,na.rm=T)
,IBUMedian = median(IBU,na.rm=T)
) %>%
ungroup()
summary(summary)
# Question: Why do we need ungroup()? The code below works just fine without ungroup()
summary = data %>%
group_by(State) %>%
summarise(ABVMedian = median(ABV,na.rm=T)
,IBUMedian = median(IBU,na.rm=T)
)
summary(summary)
# There is an NA value. Which one is it?
summary[rowSums(is.na(summary)) > 0,]
# SD has NA values for IBUMedian; need to remove before plotting
# Why does SD have NA values even though we removed NA values when we calculated median?
# Reason: na.rm will remove NA values before applying median function. However, if a state has all NA values
# for a field (for example SD has all NA value for IBU), the summarize will add a NA value for that State
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
data$State <- trim(data$State)
data[data$State == 'SD', ]
ggplot(data=filter(summary,!is.na(ABVMedian))
,aes(x=fct_reorder(State,ABVMedian,desc=T)
,y=ABVMedian)) +
geom_col() +
xlab("State") +
ylab("Median Alcohol Content") +
scale_y_continuous(labels=percent)+
coord_flip()
ggplot(data=filter(summary,!is.na(IBUMedian))
,aes(x=fct_reorder(State,IBUMedian,desc=T)
,y=IBUMedian)) +
geom_col() +
xlab("State") +
ylab("Median International Bitterness Unit") +
coord_flip()
```
# State with maximum ABV
Which state has the maximum alcoholic (ABV) beer? Which state has the most bitter (IBU) beer?
```{r}
message("The State with the maximum alcoholic (ABV) beer is:"
,arrange(data,desc(ABV))$State[1]
)
message("The State with the most bitter (IBU) beer is:"
,arrange(data,desc(IBU))$State[1]
)
```
## Map of States and their ABV
```{r Leaflet_Map_ABC}
#stats map
states=statesData
states@data  = states@data %>% left_join(data,by='name')
#states=statesData
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g Breweries",
states$name, states$n
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7,
position = "bottomright", title='Breweries per State')
```
# ABV summary
Summary statistics for the ABV variable:
```{r}
summary(data$ABV)
```
# Relationship between IBU and ABV
Is there an apparent relationship between the bitterness of the beer and its alcoholic content? Draw a scatter plot.
```{r warning=FALSE}
ggplot(data=data,aes(x=IBU,y=ABV))+
geom_point() +
geom_smooth(method='lm') +
scale_y_continuous(labels=percent)
model=lm(data=data,formula=ABV~IBU)
model
```
We have a very slight positive correlation between ABV and IBU, with a coefficient of `r round(model$coefficients[[2]]*100,digits=4)` of increase % Alcohol per IBU point
names(data)
nrow(data)
statesABV_IBU=data %>%
group_by(State) %>%
summarise(AvgABV= mean(ABV,na.rm=T)
avgIBU = mean(IBY,na.rm=T))  %>%
statesABV_IBU=data %>%
group_by(State) %>%
summarise(AvgABV= mean(ABV,na.rm=T)
,avgIBU = mean(IBY,na.rm=T))  %>%
ungroup()
statesABV_IBU=data %>%
group_by(State) %>%
summarise(AvgABV= mean(ABV,na.rm=T)
,avgIBU = mean(IBU,na.rm=T))  %>%
ungroup()
statesABV_IBU=data %>%
group_by(name=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
states@data %>% left_join(statesABV_IBU,by='name')
statesABV_IBU
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
statesABV_IBU
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
View(statesABV_IBU)
View(data)
#stats map
states@data  = states@data %>% left_join(statesABV_IBU,by='abb')
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
#stats map
states@data  = states@data %>% left_join(statesABV_IBU,by='abb')
#states=statesData
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$n, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g Breweries",
states$name, states$n
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7,
position = "bottomright", title='Breweries per State')
#states=statesData
bins <- c(0, 5, 10, 15, 20, 30,Inf)
pal <- colorBin("YlOrRd", domain = states$MaxABV, bins = bins)
labels <- sprintf("<strong>%s</strong><br/>%g Max ABV",states$name, states$MaxABV) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7,
position = "bottomright", title='Max ABV per State')
statesABV_IBU=data %>%
group_by(abb=State) %>%
summarise(MaxABV= max(ABV,na.rm=T)
,MaxIBU = max(IBU,na.rm=T))  %>%
ungroup()
summary(statesABV_IBU$MaxABV)
statesABV_IBU$MaxABV
sort(statesABV_IBU$MaxABV)
sort(statesABV_IBU$MaxIBU)
state.x77
install.packages('USAboundaries')
USAboundaries::us_states()
t=USAboundaries::us_states()
t$statefp
# population
census = read.csv('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv')
# population
census = read.csv('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv')
census$STATE
census$STATE
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
dfStates
dfStates
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(ggplot2)
library(htmltools)
library(knitr)
library(scales)
# For maps
library(geojsonio)
library(leaflet)
library(datasets)
# population
census = read.csv('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv')
#dataframe about states
dfStates=data.frame(name=state.name,abb=state.abb) %>%
left_join(select(census,name=NAME,pop=POPESTIMATE2017),by='name')
#getting states maps
states <- geojsonio::geojson_read("data/us-states.json", what = "sp")
#addint state id
states@data = states@data %>% inner_join(dfStates,by='name')
# population
download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
# population
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
# population
#download.file('https://www2.census.gov/programs-surveys/popest/datasets/2010-2017/national/totals/nst-est2017-alldata.csv','data/census.csv')
census = read.csv('data/census.csv')
